name: Delta Deployment to Dev

on:
  workflow_dispatch:

jobs:
  delta-deploy:
    runs-on: ubuntu-latest
    container:
      image: salesforce/cli:latest-full

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Authenticate to Dev Org
        run: |
          echo "${{ secrets.DEV_SFDX_URL }}" > auth.txt
          sf org login sfdx-url -f auth.txt -a DevOrg -s
        shell: bash

      - name: Detect Changed Files
        run: |
          mkdir delta
          git fetch --all
          git diff --name-only HEAD^ HEAD | grep "^force-app" > changed-files.txt || true
          echo "Changed Files:"
          cat changed-files.txt || echo "No metadata changed"
        shell: bash

      - name: Generate Package.xml (Simple)
        run: |
          if [ ! -s changed-files.txt ]; then
            echo "No metadata changes found. Skipping deployment."
            exit 0
          fi

          echo "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" > delta/package.xml
          echo "<Package xmlns=\"http://soap.sforce.com/2006/04/metadata\">" >> delta/package.xml

          while IFS= read -r file; do
            folder=$(dirname "$file" | awk -F'/' '{print $4}')
            name=$(basename "$file" | sed 's/\..*$//')

            case $folder in
              classes) type="ApexClass" ;;
              triggers) type="ApexTrigger" ;;
              lwc) type="LightningComponentBundle" ;;
              aura) type="AuraDefinitionBundle" ;;
              objects) type="CustomObject" ;;
              layouts) type="Layout" ;;
              permissionsets) type="PermissionSet" ;;
              *) echo "Skipping unsupported folder: $folder"; continue ;;
            esac

            echo "  <types>" >> delta/package.xml
            echo "    <members>${name}</members>" >> delta/package.xml
            echo "    <name>${type}</name>" >> delta/package.xml
            echo "  </types>" >> delta/package.xml

          done < changed-files.txt

          echo "  <version>60.0</version>" >> delta/package.xml
          echo "</Package>" >> delta/package.xml

          echo "Generated package.xml:"
          cat delta/package.xml
        shell: bash

      - name: Deploy Delta to Dev
        run: |
          if [ ! -s changed-files.txt ]; then
            echo "No deployment needed."
            exit 0
          fi

          echo "Deploying delta metadata..."
          sf project deploy start -x delta/package.xml -u DevOrg -l NoTestRun -w 60 --verbose
        shell: bash
